// notificateController.js
const { pool } = require("../config/db");

const { Expo } = require("expo-server-sdk");
const expo = new Expo();

// *** sendPushNotification ***
const sendPushNotification = async (expoPushToken, message) => {
  if (!Expo.isExpoPushToken(expoPushToken)) {
    console.error(`Invalid Expo push token: ${expoPushToken}`);
    return;
  }

  try {
    const messages = [
      {
        to: expoPushToken,
        sound: "default",
        body: message,
        data: { withSome: "data" },
      },
    ];

    const ticket = await expo.sendPushNotificationsAsync(messages);
    console.log("Push Notification Sent:", ticket);
  } catch (error) {
    console.error("Error sending push notification:", error);
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
const approveAccessRequest = async (req, res) => {
  const { child_id, supervisor_id, parent_id, notification_id } = req.body;

  if (!child_id || !supervisor_id || !parent_id) {
    return res
      .status(400)
      .json({ message: "Child ID, Supervisor ID, and Parent ID are required" });
  }

  try {
    const connection = await pool.getConnection();

    // ‡∏î‡∏∂‡∏á userName ‡∏Ç‡∏≠‡∏á Supervisor
    const [supervisorRows] = await connection.execute(
      "SELECT userName FROM users WHERE user_id = ?",
      [supervisor_id]
    );

    if (supervisorRows.length === 0) {
      return res.status(404).json({ message: "Supervisor not found" });
    }

    const supervisorName = supervisorRows[0].userName;

    // update status & template_id & message
    const [result] = await connection.execute(
      "UPDATE notifications SET status = 'read', template_id = 3, message = ? WHERE notification_id = ?",
      [
        `‚úÖ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡πá‡∏Å‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö ${supervisorName} ‡πÅ‡∏•‡πâ‡∏ß!`,
        notification_id,
      ]
    );

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
    await connection.execute(
      "UPDATE access_requests SET status = ? WHERE child_id = ? AND supervisor_id = ?",
      ["approved", child_id, supervisor_id]
    );

    // ‡∏î‡∏∂‡∏á rooms_id ‡∏Ç‡∏≠‡∏á Supervisor
    const [roomsIdRows] = await connection.execute(
      "SELECT rooms_id FROM access_requests WHERE supervisor_id = ? AND child_id = ?",
      [supervisor_id, child_id]
    );

    if (roomsIdRows.length === 0) {
      return res.status(404).json({ message: "Supervisor not found" });
    }

    const roomsId = roomsIdRows[0].rooms_id;
    console.log("roomsId: ", roomsId);

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏î‡πá‡∏Å‡πÉ‡∏ô rooms_children
    await connection.execute(
      "INSERT INTO rooms_children (rooms_id, child_id, supervisor_id) VALUES (?, ?, ?)",
      [roomsId, child_id, supervisor_id]
    );

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏î‡πá‡∏Å‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á supervisor_children
    await connection.execute(
      "INSERT INTO supervisor_children (supervisor_id, child_id) VALUES (?, ?)",
      [supervisor_id, child_id]
    );

    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Notification ‡∏•‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    await connection.execute(
      "INSERT INTO notifications (user_id, message, supervisor_id, child_id, template_id, status) VALUES (?, ?, ?, ?, ?, ?)",
      [
        supervisor_id,
        "‚úÖ ‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡πá‡∏Å‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß!",
        supervisor_id,
        child_id,
        2,
        "unread",
      ]
    );

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Expo Push Token ‡∏Ç‡∏≠‡∏á Supervisor
    const [supervisorSend] = await connection.execute(
      "SELECT expo_push_token FROM expo_tokens WHERE user_id = ?",
      [supervisor_id]
    );

    if (!supervisorSend.length) {
      return res.status(404).json({ message: "Supervisor not found" });
    }

    const supervisorPushToken = supervisorSend[0].expo_push_token;

    if (supervisorPushToken) {
      // ‚úÖ ‡∏™‡πà‡∏á Push Notification ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•
      await sendPushNotification(
        supervisorPushToken,
        "‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡πá‡∏Å‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß!"
      );
    }

    connection.release();

    return res.status(200).json({
      message:
        "Access request approved, notification saved, and push sent to supervisor",
    });
  } catch (err) {
    console.error("Error approving access request:", err);
    return res.status(500).json({ message: "Error approving access request" });
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
const rejectAccessRequest = async (req, res) => {
  const { child_id, supervisor_id, parent_id, notification_id } = req.body;

  if (!child_id || !supervisor_id || !parent_id) {
    return res
      .status(400)
      .json({ message: "Child ID, Supervisor ID, and Parent ID are required" });
  }

  try {
    const connection = await pool.getConnection();

    // ‡∏î‡∏∂‡∏á userName ‡∏Ç‡∏≠‡∏á Supervisor
    const [supervisorRows] = await connection.execute(
      "SELECT userName FROM users WHERE user_id = ?",
      [supervisor_id]
    );

    if (supervisorRows.length === 0) {
      return res.status(404).json({ message: "Supervisor not found" });
    }

    const supervisorName = supervisorRows[0].userName;

    // update status & template_id & message
    const [result] = await connection.execute(
      "UPDATE notifications SET status = 'read', template_id = 3, message = ? WHERE notification_id = ?",
      [
        `‚úÖ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡πá‡∏Å‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö ${supervisorName} ‡πÅ‡∏•‡πâ‡∏ß!`,
        notification_id,
      ]
    );

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
    await connection.execute(
      "UPDATE access_requests SET status = ? WHERE child_id = ? AND supervisor_id = ?",
      ["rejected", child_id, supervisor_id]
    );

    // üö´ ‡πÄ‡∏û‡∏¥‡πà‡∏° Notification ‡∏•‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    await connection.execute(
      "INSERT INTO notifications (user_id, message, supervisor_id, child_id, template_id, status) VALUES (?, ?, ?, ?, ?, ?)",
      [
        supervisor_id,
        "üö´ ‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡πá‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥!",
        supervisor_id,
        child_id,
        4,
        "unread",
      ]
    );

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Expo Push Token ‡∏Ç‡∏≠‡∏á Supervisor
    const [supervisorSend] = await connection.execute(
      "SELECT expo_push_token FROM expo_tokens WHERE user_id = ?",
      [supervisor_id]
    );

    if (!supervisorSend.length) {
      return res.status(404).json({ message: "Supervisor not found" });
    }

    const supervisorPushToken = supervisorSend[0].expo_push_token;

    if (supervisorPushToken) {
      // ‚úÖ ‡∏™‡πà‡∏á Push Notification ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•
      await sendPushNotification(
        supervisorPushToken,
        "üö´ ‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡πá‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥!"
      );
    }

    connection.release();

    return res.status(200).json({
      message:
        "Access request rejected, notification saved, and push sent to supervisor",
    });
  } catch (err) {
    console.error("Error rejected access request:", err);
    return res.status(500).json({ message: "Error rejected access request" });
  }
};

// saveExpoPushToken
const saveExpoPushToken = async (req, res) => {
  const { user_id, expoPushToken } = req.body;
  console.log("üì© Received Token at Backend:", expoPushToken);

  if (!user_id || !expoPushToken) {
    return res
      .status(400)
      .json({ message: "User ID and Expo Push Token are required" });
  }

  try {
    const connection = await pool.getConnection();

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Token ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á expo_tokens
    await connection.execute(
      `INSERT INTO expo_tokens (user_id, expo_push_token, updated_at)
   VALUES (?, ?, NOW())
   ON DUPLICATE KEY UPDATE 
     expo_push_token = VALUES(expo_push_token), 
     updated_at = NOW()`,
      [user_id, expoPushToken]
    );

    connection.release();

    return res
      .status(200)
      .json({ message: "Expo Push Token saved successfully" });
  } catch (error) {
    console.error("Error saving push token:", error);
    return res.status(500).json({ message: "Error saving push token" });
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡∏≤‡∏° user_id
const getAllNotifications = async (req, res) => {
  const { user_id } = req.query;
  try {
    const connection = await pool.getConnection();

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á user_id ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
    const [notifications] = await connection.execute(
      "SELECT * FROM notifications WHERE user_id = ? ORDER BY created_at DESC LIMIT 10",
      [user_id]
    );

    connection.release();

    // ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    return res.status(200).json({ notifications });
  } catch (err) {
    console.error("Error fetching notifications:", err);
    return res.status(500).json({ message: "Error fetching notifications" });
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô 20 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
const deleteOldNotifications = async (user_id) => {
  try {
    const connection = await pool.getConnection();

    // ‡∏•‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÄ‡∏Å‡∏¥‡∏ô 20 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
    await connection.execute(
      `
      DELETE FROM notifications
      WHERE notification_id NOT IN (
        SELECT notification_id FROM (
          SELECT notification_id FROM notifications
          WHERE user_id = ?
          ORDER BY created_at DESC
          LIMIT 20
        ) AS latest_notifications
      ) AND user_id = ?;
    `,
      [user_id, user_id]
    );
    console.log("‚úÖ Old notifications deleted for User ID", user_id);

    connection.release();
  } catch (error) {
    console.error("‚ùå Error deleting old notifications:", error);
  }
};

const sendAssessmentReminder = async () => {
  let connection;
  try {
    connection = await pool.getConnection();

    // ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡πá‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô
    const [childrenToNotify] = await connection.execute(`
      SELECT 
        c.child_id,
        c.firstName,
        c.lastName,
        MAX(a.assessment_date) AS last_assessment_date,
        a.user_id, 
        u.userName AS last_evaluator_name, 
        et.expo_push_token
      FROM children c
      JOIN assessments a ON c.child_id = a.child_id
      JOIN users u ON a.user_id = u.user_id 
      JOIN expo_tokens et ON a.user_id = et.user_id 
      WHERE a.assessment_date <= NOW() - INTERVAL 2 WEEK
      GROUP BY c.child_id, a.user_id, u.userName, et.expo_push_token
      ORDER BY last_assessment_date DESC; 
    `);

    if (childrenToNotify.length === 0) {
      console.log("No children need assessment reminders at this time.");
      return;
    }

    for (const child of childrenToNotify) {
      const message = `‚ö†Ô∏è ‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á ${child.firstName} ${child.lastName} ‡πÅ‡∏•‡πâ‡∏ß!`;

      // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      await connection.execute(
        "INSERT INTO notifications (user_id, message, supervisor_id, child_id, template_id, status) VALUES (?, ?, ?, ?, ?, ?)",
        [child.user_id, message, child.user_id, child.child_id, 2, "unread"]
      );

      // ‚úÖ ‡∏•‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô 20 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
      await deleteOldNotifications(child.user_id);

      // ‚úÖ ‡∏™‡πà‡∏á Push Notification
      if (child.expo_push_token) {
        await sendPushNotification(child.expo_push_token, message);
      }

      console.log(
        `‚úÖ Reminder sent for child ID ${child.child_id} to User ID ${child.user_id}`
      );
    }
  } catch (error) {
    console.error("‚ùå Error sending assessment reminders:", error);
  } finally {
    if (connection) connection.release();
  }
};

// Function to mark a notification as read
const markNotificationAsRead = async (req, res) => {
  const { notification_id } = req.body;

  if (!notification_id) {
    return res.status(400).json({ message: "Notification ID is required" });
  }

  try {
    const connection = await pool.getConnection();

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï status ‡πÄ‡∏õ‡πá‡∏ô 'read'
    const [result] = await connection.execute(
      "UPDATE notifications SET status = 'read' WHERE notification_id = ?",
      [notification_id]
    );

    connection.release();

    if (result.affectedRows === 0) {
      return res.status(404).json({ message: "Notification not found" });
    }

    return res.status(200).json({ message: "Notification marked as read" });
  } catch (error) {
    console.error("Error updating notification status:", error);
    return res
      .status(500)
      .json({ message: "Error updating notification status" });
  }
};

module.exports = {
  approveAccessRequest,
  getAllNotifications,
  saveExpoPushToken,
  sendAssessmentReminder,
  markNotificationAsRead,
  rejectAccessRequest,
};
